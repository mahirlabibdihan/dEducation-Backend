create or replace trigger CHECK_DATE_OF_BIRTH
    before insert
    on Users
    for each row
DECLARE
BEGIN
    IF (:new.DATE_OF_BIRTH <= ADD_MONTHS(SYSDATE, - 120) AND :new.DATE_OF_BIRTH >= (ADD_MONTHS(SYSDATE, -1300))) = FALSE THEN
        RAISE_APPLICATION_ERROR(-20999, 'invalid date');
    end if;
end;
/

CREATE OR REPLACE TRIGGER GENERATE_USER_ID
	BEFORE INSERT
	ON Users
	FOR EACH ROW
BEGIN
	SELECT COUNT(*)+1 INTO :NEW.user_id
	FROM Users; 
END;
/

CREATE OR REPLACE TRIGGER GENERATE_TUTION_ID
	BEFORE INSERT
	ON Tutions
	FOR EACH ROW
BEGIN
	SELECT COUNT(*)+1 INTO :NEW.tution_id
	FROM Tutions; 
END;
/

CREATE OR REPLACE TRIGGER GENERATE_TUTION_POST_ID
	BEFORE INSERT
	ON Tution_Posts
	FOR EACH ROW
BEGIN
	SELECT COUNT(*)+1 INTO :NEW.post_id
	FROM Tution_Posts; 
END;
/

CREATE OR REPLACE TRIGGER GENERATE_COACHING_ID
	BEFORE INSERT
	ON Coachings
	FOR EACH ROW
BEGIN
	SELECT COUNT(*)+1 INTO :NEW.coaching_id
	FROM Coachings; 
END;
/

CREATE OR REPLACE TRIGGER GENERATE_COURSE_ID
	BEFORE INSERT
	ON Courses
	FOR EACH ROW
BEGIN
	SELECT COUNT(*)+1 INTO :NEW.course_id
	FROM Courses; 
END;
/

CREATE OR REPLACE TRIGGER GENERATE_BATCH_ID
	BEFORE INSERT
	ON Batches
	FOR EACH ROW
BEGIN
	SELECT COUNT(*)+1 INTO :NEW.batch_id
	FROM Batches; 
END;
/

CREATE OR REPLACE TRIGGER GENERATE_EDUCATION_ID
	BEFORE INSERT
	ON Educations
	FOR EACH ROW
BEGIN
	SELECT COUNT(*)+1 INTO :NEW.eq_id
	FROM Educations; 
END;
/

CREATE OR REPLACE TRIGGER NEW_USER
	AFTER INSERT
	ON USERS
	FOR EACH ROW
BEGIN
	IF :NEW.role = 'STUDENT' THEN
		CREATE_STUDENT(:NEW.user_id);
	ELSE
		CREATE_TUTOR(:NEW.user_id);
	END IF;
END;
/

CREATE OR REPLACE TRIGGER CHECK_EMAIL
	BEFORE INSERT
	ON USERS
	FOR EACH ROW
DECLARE	
	user_row Users%ROWTYPE;
BEGIN
	IF IS_EMAIL_TAKEN(:NEW.email) = 'YES' THEN
		RAISE_APPLICATION_ERROR(-20999, 'Email is already taken');
	END IF;
END;
/

CREATE OR REPLACE TRIGGER CHECK_BATCH_LIMIT
	BEFORE INSERT
	ON EnrolledIn
	FOR EACH ROW
DECLARE	
	student_count NUMBER;
BEGIN
	IF GET_BATCH_STUDENT_COUNT(:NEW.batch_id) = GET_SEAT_COUNT(:NEW.batch_id) THEN
		RAISE_APPLICATION_ERROR(-20999, 'Batch is full');
	END IF;
END;
/

CREATE OR REPLACE TRIGGER MATCH_CLASS
	BEFORE INSERT
	ON EnrolledIn
	FOR EACH ROW
DECLARE	
student_row	STUDENT;
course_row	COURSE;
BEGIN
	student_row := GET_STUDENT_DETAILS(:NEW.student_id);
	course_row	:= GET_COURSE_DETAILS(:NEW.course_id,:NEW.batch_id);
	IF student_row.class <> course_row.class THEN
		RAISE_APPLICATION_ERROR(-20999, 'Your class doesn`t match with the course');
	END IF;
END;
/

--- Prevent tutor from applying to own student's post

-- DROP TRIGGER NEW_USER ;
SELECT * FROM user_errors WHERE type='TRIGGER';